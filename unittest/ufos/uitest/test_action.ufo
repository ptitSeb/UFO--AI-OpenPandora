/**
 * @brief Unittest for actions
 * Move it into the ui ufo script directory (/base/ufos/ui/), run the game, and run the command "ui_push unittest_action"
 * Every thing must be green and it must not print any text or warning into the console.
 */

window test_action_eventtest {
	{
		invis true
	}

	func onWindowOpened {
		*cvar:test = 4
		cmd "ui_pop"
	}
}

window test_action
{
	{
		pos "100 100"
		size "340 400"
		dragbutton	true
		closebutton	true
		string		"_Unittest setter"
		bgcolor		"0 0 0 1"
	}

	string commonTitle {
		pos		"20 40"
		string	"common"
	}

	string testCommon1 {
		pos		"20 60"
		string	"t1"
	}

	string testCommon2 {
		pos		"20 80"
		string	"t2"
	}

	string testCommon3 {
		pos		"20 100"
		string	"t3"
	}

	string testCommon4 {
		pos		"20 120"
		string	"t4"
	}

	string testCommon5 {
		pos		"20 140"
		string	"t5"
	}

	string testCommon6 {
		pos		"20 160"
		string	"t6"
	}

	string testCommon7 {
		pos		"20 180"
		string	"t7"
	}

	string testCommon8 {
		pos		"20 200"
		string	"t8"
	}

	string testCommon9 {
		pos		"20 220"
		string	"t9"
	}

	string listenerTitle {
		pos		"80 40"
		string	"listener"
	}

	string testListener1 {
		pos		"80 60"
		string	"t1"
	}

	string testListener2 {
		pos		"80 80"
		string	"t2"
	}

	string testListener3 {
		pos		"80 100"
		string	"t3"
	}

	string testListener4 {
		pos		"80 120"
		string	"t4"
	}

	string testListener5 {
		pos		"80 140"
		string	"t5"
	}

	string testListener6 {
		pos		"80 160"
		string	"t6"
	}

	string testListener7 {
		pos		"80 180"
		string	"t7"
	}

	string testListener8 {
		pos		"80 200"
		string	"t8"
	}

	string testListener9 {
		pos		"80 220"
		string	"t9"
	}

	string testListener10 {
		pos		"80 240"
		string	"t10"
	}

	string lackTitle {
		pos		"140 40"
		string	"lack"
	}

	string testLack1 {
		pos		"140 60"
		string	"t1"
		invis true		/** @todo we know it dont work... we need to fix it */
	}

	string testLack2 {
		pos		"140 80"
		string	"t2"
		invis true		/** @todo we know it dont work... we need to fix it */
	}

	string testLack3 {
		pos		"140 100"
		string	"t3"
		invis true		/** @todo we know it dont work... we need to fix it */
	}

	//
	// Common tests
	//

	func set0 {
		*cvar:test = 0
	}

	func set1 {
		*cvar:test = 1
	}

	func set2 {
		*cvar:test = 2
	}

	confunc unittest_action_inject {
		*cvar:test = <1>
	}

	spinner testFoo {
		current		*cvar:test_nodefoo
		min			0
		max			16
		invis		true
		disabled	false
		onChange	{ *cvar:test = 2 }
	}

	confunc testActionInjection {
		if ( *cvar:test == 2 ) { *node:root.testCommon4@color = "0 1 0 1" }
		else { *node:root.testCommon4@color = "1 0 0 1" }
	}

	confunc testActionEvent {
		if ( *cvar:test == 4 ) { *node:root.testCommon5@color = "0 1 0 1" }
		else { *node:root.testCommon5@color = "1 0 0 1" }
	}

	//
	// Common tests
	//

	func testCommon {

		// func

		call *node:root.set0
		if ( *cvar:test == 0 ) { *node:root.testCommon1@color = "0 1 0 1" }
		else { *node:root.testCommon1@color = "1 0 0 1" }
		call *node:root.set1
		if ( *cvar:test == 1 ) { *node:root.testCommon2@color = "0 1 0 1" }
		else { *node:root.testCommon2@color = "1 0 0 1" }

		// confunc

		*cvar:test = 0
		cmd "unittest_action_inject 2"
		if ( *cvar:test == 0 ) { *node:root.testCommon3@color = "0 1 0 1" }
		else { *node:root.testCommon3@color = "1 0 0 1" }
		cmd "testActionInjection"

		// node event

		*node:root.testCommon5@color = "1 0 0 1"
		cmd "ui_push test_action_eventtest"
		cmd "testActionEvent"

		*node:root.testCommon6@color = "1 0 0 1"
		*node:root.testCommon7@color = "1 0 0 1"
		*node:root.testFoo@onClick = { *node:root.testCommon6@color = "0 1 0 1" }
		call *node:root.testFoo@onClick
		*node:root.testFoo@onClick = { *node:root.testCommon7@color = "0 1 0 1" }
		call *node:root.testFoo@onClick

		*cvar:test = 1
		while ( *cvar:test == 1 ) {
			if ( *cvar:test == 1 ) { *node:root.testCommon8@color = "0 1 0 1" }
			else { *node:root.testCommon8@color = "1 0 0 1" }
			*cvar:test = 0
		}

		*cvar:test = 0
		while ( *cvar:test < 3 ) {
			// we dont use expression, to have no problem with it
			if ( *cvar:test == 0 ) { *cvar:test = 1 }
			elif ( *cvar:test == 1 ) { *cvar:test = 2 }
			elif ( *cvar:test == 2 ) { *cvar:test = 3 }
			elif ( *cvar:test == 3 ) { *cvar:test = 4 }
		}
		if ( *cvar:test == 3 ) { *node:root.testCommon9@color = "0 1 0 1" }
		else { *node:root.testCommon9@color = "1 0 0 1" }
	}

	//
	// Listener tests
	//

	button sender1 { invis true onClick { *node:root.testListener1@color = "0 1 0 1" } }
	func listener1 { *node:root.testListener2@color = "0 1 0 1" }

	button sender2 { invis true onClick { *node:root.testListener3@color = "0 1 0 1" } }
	func listener2 { *node:root.testListener4@color = "1 0 0 1" }

	button sender3 { invis true onClick { *node:root.testListener5@color = "0 1 0 1" } }
	func listener3_1 { *node:root.testListener6@color = "0 1 0 1" }
	func listener3_2 { *node:root.testListener7@color = "0 1 0 1" }

	button sender4 { invis true onClick { *node:root.testListener8@color = "0 1 0 1" } }
	func listener4_1 { *node:root.testListener9@color = "1 0 0 1" }
	func listener4_2 { *node:root.testListener10@color = "0 1 0 1" }

	func testListenerSetUp {
		// one listener
		cmd "ui_addlistener <path:root>.sender1@onClick <path:root>.listener1"

		// no listener
		cmd "ui_addlistener <path:root>.sender2@onClick <path:root>.listener2"
		cmd "ui_removelistener <path:root>.sender2@onClick <path:root>.listener2"

		// two listener
		cmd "ui_addlistener <path:root>.sender3@onClick <path:root>.listener3_1"
		cmd "ui_addlistener <path:root>.sender3@onClick <path:root>.listener3_2"

		// one listener
		cmd "ui_addlistener <path:root>.sender4@onClick <path:root>.listener4_1"
		cmd "ui_addlistener <path:root>.sender4@onClick <path:root>.listener4_2"
		cmd "ui_removelistener <path:root>.sender4@onClick <path:root>.listener4_1"
	}

	confunc testListenerTest {
		// one listener
		call *node:root.sender1@onClick

		// no listener
		*node:root.testListener4@color = "0 1 0 1"
		call *node:root.sender2@onClick

		// two listener
		call *node:root.sender3@onClick

		// one listener
		*node:root.testListener9@color = "0 1 0 1"
		call *node:root.sender4@onClick

		// clean up
		cmd "testListenerTearDown"
	}

	confunc testListenerTearDown {
		// one listener
		cmd "ui_removelistener <path:root>.sender1@onClick <path:root>.listener1"

		// no listener

		// two listener
		cmd "ui_removelistener <path:root>.sender3@onClick <path:root>.listener3_1"
		cmd "ui_removelistener <path:root>.sender3@onClick <path:root>.listener3_2"

		// one listener
		cmd "ui_removelistener <path:root>.sender4@onClick <path:root>.listener4_2"
	}

	func testListener {
		call *node:root.testListenerSetUp
		cmd "testListenerTest"
	}

	//
	// Lack tests
	// thing dont work
	//

	func testLack {
		// @todo

		// 1) use mixture of anonymous setter and listener should not work
		// (can be a right behaviour)

		// 1-1) add a listener can change an already set anonymous function
		*node:root.testLack1@color = "1 0 0 1"

		// 1-2) set an anonymous function will remove an existing listener
		*node:root.testLack2@color = "1 0 0 1"

		// 2) listener into an inherited event should also change the super event
		// (wrong behaviour)
		*node:root.testLack3@color = "1 0 0 1"
	}

	//
	// Main
	//

	func onWindowOpened {
		call *node:root.testCommon
		call *node:root.testListener
		call *node:root.testLack
	}

}
